;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{}, :name cljs-http.core, :imports {EventType goog.net.EventType, XhrIo goog.net.XhrIo}, :requires {EventType goog.net.EventType, XhrIo goog.net.XhrIo, util cljs-http.util, cljs-http.util cljs-http.util, async cljs.core.async, cljs.core.async cljs.core.async}, :uses nil, :defs {pending-requests {:name cljs-http.core/pending-requests, :file "dev-resources/public/js/out/cljs_http/core.cljs", :line 6, :column 1, :end-line 6, :end-column 22, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/core.cljs", :line 6, :column 6, :end-line 6, :end-column 22}}, abort! {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/core.cljs", :line 8, :column 7, :end-line 8, :end-column 13, :arglists (quote ([channel])), :doc "Attempt to close the given channel and abort the pending HTTP request\n  with which it is associated."}, :name cljs-http.core/abort!, :variadic false, :file "dev-resources/public/js/out/cljs_http/core.cljs", :end-column 13, :method-params ([channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channel])), :doc "Attempt to close the given channel and abort the pending HTTP request\n  with which it is associated."}, request {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/core.cljs", :line 17, :column 7, :end-line 17, :end-column 14, :arglists (quote ([{:keys [request-method headers body with-credentials?], :as request}])), :doc "Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel."}, :name cljs-http.core/request, :variadic false, :file "dev-resources/public/js/out/cljs_http/core.cljs", :end-column 14, :method-params ([p__26647]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [request-method headers body with-credentials?], :as request}])), :doc "Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:get :headers :with-credentials? :status :timeout :body :trace-redirects :request-method}, :order [:request-method :headers :body :with-credentials? :get :timeout :status :trace-redirects]}, :doc nil}