;; Analyzed by ClojureScript 0.0-3308
{:use-macros {go cljs.core.async.macros}, :excludes #{get}, :name cljs-http.client, :imports nil, :requires {uri goog.Uri, cljs-http.core cljs-http.core, no.en.core no.en.core, goog.Uri goog.Uri, cljs-http.util cljs-http.util, cljs.core.async cljs.core.async, util cljs-http.util, clojure.string clojure.string, cljs.reader cljs.reader, core cljs-http.core}, :uses {url-decode no.en.core, <! cljs.core.async, join clojure.string, close! cljs.core.async, chan cljs.core.async, url-encode no.en.core, read-string cljs.reader, split clojure.string, put! cljs.core.async, blank? clojure.string}, :defs {options {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 244, :column 7, :end-line 244, :end-column 14, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/options, :variadic true, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, wrap-android-cors-bugfix {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 148, :column 7, :end-line 148, :end-column 31, :arglists (quote ([client]))}, :name cljs-http.client/wrap-android-cors-bugfix, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 31, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client]))}, encode-val {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 44, :column 8, :end-line 44, :end-column 18, :private true, :arglists (quote ([k v]))}, :private true, :name cljs-http.client/encode-val, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 18, :method-params ([k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k v]))}, put {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 259, :column 7, :end-line 259, :end-column 10, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/put, :variadic true, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, parse-query-params {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 15, :column 7, :end-line 15, :end-column 25, :arglists (quote ([s])), :doc "Parse `s` as query params and return a hash map."}, :name cljs-http.client/parse-query-params, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 25, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse `s` as query params and return a hash map."}, wrap-accept {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 95, :column 7, :end-line 95, :end-column 18, :arglists (quote ([client & [accept]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [accept])], :arglists ([client & [accept]]), :arglists-meta (nil)}}, :name cljs-http.client/wrap-accept, :variadic true, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [accept])], :arglists ([client & [accept]]), :arglists-meta (nil)}, :method-params [(client [accept])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists ([client & [accept]])}, wrap-content-type {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 102, :column 7, :end-line 102, :end-column 24, :arglists (quote ([client & [content-type]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [content-type])], :arglists ([client & [content-type]]), :arglists-meta (nil)}}, :name cljs-http.client/wrap-content-type, :variadic true, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [content-type])], :arglists ([client & [content-type]]), :arglists-meta (nil)}, :method-params [(client [content-type])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists ([client & [content-type]])}, wrap-edn-params {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 73, :column 7, :end-line 73, :end-column 22, :arglists (quote ([client])), :doc "Encode :edn-params in the `request` :body and set the appropriate\n  Content Type header."}, :name cljs-http.client/wrap-edn-params, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 22, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Encode :edn-params in the `request` :body and set the appropriate\n  Content Type header."}, wrap-form-params {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 139, :column 7, :end-line 139, :end-column 23, :arglists (quote ([client]))}, :name cljs-http.client/wrap-form-params, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 23, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client]))}, wrap-basic-auth {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 173, :column 7, :end-line 173, :end-column 22, :arglists (quote ([client & [credentials]])), :doc "Middleware converting the :basic-auth option or `credentials` into\n  an Authorization header.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [credentials])], :arglists ([client & [credentials]]), :arglists-meta (nil)}}, :name cljs-http.client/wrap-basic-auth, :variadic true, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(client [credentials])], :arglists ([client & [credentials]]), :arglists-meta (nil)}, :method-params [(client [credentials])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists ([client & [credentials]]), :doc "Middleware converting the :basic-auth option or `credentials` into\n  an Authorization header."}, wrap-request {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 194, :column 7, :end-line 194, :end-column 19, :arglists (quote ([request])), :doc "Returns a batteries-included HTTP request function coresponding to the given\n   core client. See client/client."}, :name cljs-http.client/wrap-request, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 19, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Returns a batteries-included HTTP request function coresponding to the given\n   core client. See client/client."}, encode-param {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 53, :column 8, :end-line 53, :end-column 20, :private true, :arglists (quote ([[k v]]))}, :private true, :name cljs-http.client/encode-param, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 20, :method-params ([p__26461]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[k v]]))}, request {:name cljs-http.client/request, :file "dev-resources/public/js/out/cljs_http/client.cljs", :line 213, :column 1, :end-line 222, :end-column 10, :doc "Executes the HTTP request corresponding to the given map and returns the\n   response map for corresponding to the resulting HTTP response.\n\n   In addition to the standard Ring request keys, the following keys are also\n   recognized:\n   * :url\n   * :method\n   * :query-params", :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 222, :column 3, :end-line 222, :end-column 10, :doc "Executes the HTTP request corresponding to the given map and returns the\n   response map for corresponding to the resulting HTTP response.\n\n   In addition to the standard Ring request keys, the following keys are also\n   recognized:\n   * :url\n   * :method\n   * :query-params"}}, get {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 229, :column 7, :end-line 229, :end-column 10, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/get, :variadic true, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, patch {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 249, :column 7, :end-line 249, :end-column 12, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/patch, :variadic true, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, decode-body {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 64, :column 7, :end-line 64, :end-column 18, :arglists (quote ([response decode-fn content-type request-method])), :doc "Decocde the :body of `response` with `decode-fn` if the content type matches."}, :name cljs-http.client/decode-body, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 18, :method-params ([response decode-fn content-type request-method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 4, :fn-var true, :arglists (quote ([response decode-fn content-type request-method])), :doc "Decocde the :body of `response` with `decode-fn` if the content type matches."}, wrap-json-response {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 121, :column 7, :end-line 121, :end-column 25, :arglists (quote ([client])), :doc "Decode application/json responses."}, :name cljs-http.client/wrap-json-response, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 25, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Decode application/json responses."}, wrap-edn-response {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 85, :column 7, :end-line 85, :end-column 24, :arglists (quote ([client])), :doc "Decode application/edn responses."}, :name cljs-http.client/wrap-edn-response, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 24, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Decode application/edn responses."}, move {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 239, :column 7, :end-line 239, :end-column 11, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/move, :variadic true, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, delete {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 224, :column 7, :end-line 224, :end-column 13, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/delete, :variadic true, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, wrap-json-params {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 109, :column 7, :end-line 109, :end-column 23, :arglists (quote ([client])), :doc "Encode :json-params in the `request` :body and set the appropriate\n  Content Type header."}, :name cljs-http.client/wrap-json-params, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 23, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Encode :json-params in the `request` :body and set the appropriate\n  Content Type header."}, parse-url {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([url])), :doc "Parse `url` into a hash map."}, :name cljs-http.client/parse-url, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 16, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Parse `url` into a hash map."}, wrap-url {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 165, :column 7, :end-line 165, :end-column 15, :arglists (quote ([client]))}, :name cljs-http.client/wrap-url, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 15, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client]))}, if-pos {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 12, :column 7, :end-line 12, :end-column 13, :arglists (quote ([v]))}, :name cljs-http.client/if-pos, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 13, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, head {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 234, :column 7, :end-line 234, :end-column 11, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/head, :variadic true, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, wrap-server-name {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 162, :column 7, :end-line 162, :end-column 23, :arglists (quote ([client server-name]))}, :name cljs-http.client/wrap-server-name, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 23, :method-params ([client server-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([client server-name]))}, wrap-method {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 155, :column 7, :end-line 155, :end-column 18, :arglists (quote ([client]))}, :name cljs-http.client/wrap-method, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 18, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client]))}, generate-query-string {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 58, :column 7, :end-line 58, :end-column 28, :arglists (quote ([params]))}, :name cljs-http.client/generate-query-string, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 28, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params]))}, encode-vals {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 47, :column 8, :end-line 47, :end-column 19, :private true, :arglists (quote ([k vs]))}, :private true, :name cljs-http.client/encode-vals, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 19, :method-params ([k vs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k vs]))}, post {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 254, :column 7, :end-line 254, :end-column 11, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}}, :name cljs-http.client/post, :variadic true, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url [req])], :arglists ([url & [req]]), :arglists-meta (nil)}, :method-params [(url [req])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists ([url & [req]]), :doc "Like #'request, but sets the :method and :url as appropriate."}, unexceptional-status? {:name cljs-http.client/unexceptional-status?, :file "dev-resources/public/js/out/cljs_http/client.cljs", :line 41, :column 1, :end-line 41, :end-column 27, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 41, :column 6, :end-line 41, :end-column 27}}, wrap-oauth {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 184, :column 7, :end-line 184, :end-column 17, :arglists (quote ([client])), :doc "Middleware converting the :oauth-token option into an Authorization header."}, :name cljs-http.client/wrap-oauth, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 17, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Middleware converting the :oauth-token option into an Authorization header."}, wrap-query-params {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/client.cljs", :line 131, :column 7, :end-line 131, :end-column 24, :arglists (quote ([client]))}, :name cljs-http.client/wrap-query-params, :variadic false, :file "dev-resources/public/js/out/cljs_http/client.cljs", :end-column 24, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:get :json-params :patch :else :method :move :recur :delete :headers :server-port :head :form-params :android :url :query-params :content-type :oauth-token :post :options :uri :server-name :put :query-string :body :edn-params :basic-auth :scheme :request-method :accept}, :order [:scheme :server-name :server-port :uri :query-string :query-params :head :headers :body :edn-params :request-method :recur :else :accept :content-type :json-params :form-params :patch :delete :post :put :android :method :url :basic-auth :oauth-token :get :move :options]}, :doc nil}