;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{}, :name cljs-http.util, :imports {Uri goog.Uri}, :requires {Uri goog.Uri, clojure.string clojure.string, agent goog.userAgent, goog.userAgent goog.userAgent, no.en.core no.en.core}, :uses {capitalize clojure.string, join clojure.string, lower-case clojure.string, split clojure.string, base64-encode no.en.core, blank? clojure.string}, :defs {basic-auth {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/util.cljs", :line 7, :column 7, :end-line 7, :end-column 17, :arglists (quote ([credentials])), :doc "Returns the value of the HTTP basic authentication header for\n  `credentials`."}, :name cljs-http.util/basic-auth, :variadic false, :file "dev-resources/public/js/out/cljs_http/util.cljs", :end-column 17, :method-params ([credentials]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([credentials])), :doc "Returns the value of the HTTP basic authentication header for\n  `credentials`."}, build-url {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/util.cljs", :line 18, :column 7, :end-line 18, :end-column 16, :arglists (quote ([{:keys [scheme server-name server-port uri query-string]}])), :doc "Build the url from the request map."}, :name cljs-http.util/build-url, :variadic false, :file "dev-resources/public/js/out/cljs_http/util.cljs", :end-column 16, :method-params ([p__26604]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [scheme server-name server-port uri query-string]}])), :doc "Build the url from the request map."}, camelize {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/util.cljs", :line 28, :column 7, :end-line 28, :end-column 15, :arglists (quote ([s])), :doc "Returns dash separeted string `s` in camel case."}, :name cljs-http.util/camelize, :variadic false, :file "dev-resources/public/js/out/cljs_http/util.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns dash separeted string `s` in camel case."}, build-headers {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/util.cljs", :line 35, :column 7, :end-line 35, :end-column 20, :arglists (quote ([m])), :doc "Build the headers from the map."}, :name cljs-http.util/build-headers, :variadic false, :file "dev-resources/public/js/out/cljs_http/util.cljs", :end-column 20, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Build the headers from the map."}, user-agent {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/util.cljs", :line 39, :column 7, :end-line 39, :end-column 17, :arglists (quote ([])), :doc "Returns the user agent."}, :name cljs-http.util/user-agent, :variadic false, :file "dev-resources/public/js/out/cljs_http/util.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the user agent."}, android? {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/util.cljs", :line 43, :column 7, :end-line 43, :end-column 15, :arglists (quote ([])), :doc "Returns true if the user agent is an Android client."}, :name cljs-http.util/android?, :variadic false, :file "dev-resources/public/js/out/cljs_http/util.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns true if the user agent is an Android client."}, json-decode {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/util.cljs", :line 47, :column 7, :end-line 47, :end-column 18, :arglists (quote ([s])), :doc "JSON decode an object from `s`."}, :name cljs-http.util/json-decode, :variadic false, :file "dev-resources/public/js/out/cljs_http/util.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "JSON decode an object from `s`."}, json-encode {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/util.cljs", :line 53, :column 7, :end-line 53, :end-column 18, :arglists (quote ([x])), :doc "JSON encode `x` into a String."}, :name cljs-http.util/json-encode, :variadic false, :file "dev-resources/public/js/out/cljs_http/util.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "JSON encode `x` into a String."}, parse-headers {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/dev-resources/public/js/out/cljs_http/util.cljs", :line 57, :column 7, :end-line 57, :end-column 20, :arglists (quote ([headers]))}, :name cljs-http.util/parse-headers, :variadic false, :file "dev-resources/public/js/out/cljs_http/util.cljs", :end-column 20, :method-params ([headers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([headers]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:password :username :server-port :http :uri :server-name :query-string :keywordize-keys :scheme}, :order [:username :password :scheme :server-name :server-port :uri :query-string :http :keywordize-keys]}, :doc nil}