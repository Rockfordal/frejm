;; Analyzed by ClojureScript 0.0-3308
{:use-macros {go cljs.core.async.macros, alt! cljs.core.async.macros}, :excludes #{find count}, :name rente.client.handlers, :imports nil, :requires {re-frame re-frame.core, re-frame.core re-frame.core, db rente.client.db, rente.client.db rente.client.db, http cljs-http.client, cljs-http.client cljs-http.client, async cljs.core.async, cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, alts! cljs.core.async, put! cljs.core.async}, :defs {Query {:name rente.client.handlers/Query, :file "src/rente/client/handlers.cljs", :line 11, :column 1, :end-line 11, :end-column 11, :meta {:file "/mnt/big/dok/dev/cs/rente/src/rente/client/handlers.cljs", :line 11, :column 6, :end-line 11, :end-column 11}}, fix-arguments {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/src/rente/client/handlers.cljs", :line 13, :column 8, :end-line 13, :end-column 21, :arglists (quote ([args])), :doc "Fix an arguments object, turning it into a normal javascript array"}, :name rente.client.handlers/fix-arguments, :variadic false, :file "src/rente/client/handlers.cljs", :end-column 21, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 2, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args])), :doc "Fix an arguments object, turning it into a normal javascript array"}, find {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/src/rente/client/handlers.cljs", :line 18, :column 7, :end-line 18, :end-column 11, :arglists (quote ([query]))}, :name rente.client.handlers/find, :variadic false, :file "src/rente/client/handlers.cljs", :end-column 11, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query]))}, count {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/src/rente/client/handlers.cljs", :line 28, :column 7, :end-line 28, :end-column 12, :arglists (quote ([query]))}, :name rente.client.handlers/count, :variadic false, :file "src/rente/client/handlers.cljs", :end-column 12, :method-params ([query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([query]))}, count-all {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/src/rente/client/handlers.cljs", :line 38, :column 7, :end-line 38, :end-column 16, :arglists (quote ([cls]))}, :name rente.client.handlers/count-all, :variadic false, :file "src/rente/client/handlers.cljs", :end-column 16, :method-params ([cls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cls]))}, find-all {:protocol-inline nil, :meta {:file "/mnt/big/dok/dev/cs/rente/src/rente/client/handlers.cljs", :line 41, :column 7, :end-line 41, :end-column 15, :arglists (quote ([cls]))}, :name rente.client.handlers/find-all, :variadic false, :file "src/rente/client/handlers.cljs", :end-column 15, :method-params ([cls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cls]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:initialize-db :getcourses :testa :getjs :getkurssnabb :set-active-panel :getclojure :process-getcourse-response :process-getcourses-response :active-panel :kurser :keywordize-keys :test}, :order [:initialize-db :set-active-panel :active-panel :testa :test :getclojure :process-getcourse-response :getjs :getcourses :process-getcourses-response :keywordize-keys :getkurssnabb :kurser]}, :doc nil}